// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id                Int               @id @default(autoincrement())
  firstName         String            @db.VarChar(100)
  lastName          String            @db.VarChar(100)
  email             String            @unique @db.VarChar(255)
  phone             String?           @db.VarChar(15)
  address           String?           @db.VarChar(100)
  educations        Education[]
  workExperiences   WorkExperience[]
  resumes           Resume[]
  applications      Application[]
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    @db.VarChar(100)
  title         String    @db.VarChar(250)
  startDate     DateTime
  endDate       DateTime?
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Position {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(100)
  description String    @db.VarChar(500)
  postedDate  DateTime
  organizationId Int
  organization Organization @relation(fields: [organizationId], references: [id])
  applications Application[]
}

model Application {
  id              Int       @id @default(autoincrement())
  candidateId     Int
  positionId      Int
  applicationDate DateTime
  candidate       Candidate @relation(fields: [candidateId], references: [id])
  position        Position  @relation(fields: [positionId], references: [id])
  statuses        ApplicationStatus[]
  interviews      Interview[]
  tests           Test[]
  feedbacks       Feedback[]
}

model ApplicationStatus {
  id            Int       @id @default(autoincrement())
  applicationId Int
  statusId      Int
  statusDate    DateTime
  application   Application @relation(fields: [applicationId], references: [id])
  status        Status      @relation(fields: [statusId], references: [id])
}

model Status {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String?   @db.VarChar(200)
  statuses    ApplicationStatus[]
}

model Organization {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  address     String?   @db.VarChar(200)
  employees   Employee[]
  positions   Position[]
}

model Employee {
  id             Int       @id @default(autoincrement())
  firstName      String    @db.VarChar(100)
  lastName       String    @db.VarChar(100)
  email          String    @unique @db.VarChar(255)
  organizationId Int
  roleId         Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           Role         @relation(fields: [roleId], references: [id])
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String?   @db.VarChar(200)
  employees   Employee[]
}

model Interview {
  id              Int       @id @default(autoincrement())
  applicationId   Int
  interviewDate   DateTime
  interviewer     String    @db.VarChar(100)
  location        String?   @db.VarChar(200)
  application     Application @relation(fields: [applicationId], references: [id])
}

model Test {
  id              Int       @id @default(autoincrement())
  applicationId   Int
  testDate        DateTime
  testType        String    @db.VarChar(100)
  location        String?   @db.VarChar(200)
  application     Application @relation(fields: [applicationId], references: [id])
}

model Feedback {
  id              Int       @id @default(autoincrement())
  applicationId   Int
  feedbackDate    DateTime
  comments        String    @db.VarChar(1000)
  rating          Int
  application     Application @relation(fields: [applicationId], references: [id])
}